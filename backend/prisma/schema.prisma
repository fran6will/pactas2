datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum QuestionTag {
  POLITIQUE
  ENVIRONNEMENT
  DIVERTISSEMENT
  ART_CULTURE
  SPORT
  TECHNOLOGIE
  ECONOMIE
  SOCIAL
  EDUCATION
  SANTE
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String
  name         String
  tokens       Float         @default(0)
  userType     String        @default("user")
  isAdmin      Boolean       @default(false)
  organization Organization?
  bets         Bet[]
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}
enum OrganizationCategory {
  EDUCATION
  SANTE
  ENVIRONNEMENT
  CULTURE
  SPORT
  SOCIAL
  TECHNOLOGIE
  HUMANITAIRE
  COMMUNAUTAIRE
  RECHERCHE
}
model Organization {
  id            String         @id @default(cuid())
  name          String        @unique
  description   String
  category      OrganizationCategory? // Rendons le champ optionnel avec ?

  email         String?
  phone         String?
  website       String?
  
  // Nouvelles informations de profil
  mission       String?       @db.Text
  vision        String?       @db.Text
  team          String?       @db.Text
  fundingGoals  String?       @db.Text
  impact        String?       @db.Text
  
  // Réseaux sociaux
  twitterUrl    String?
  linkedinUrl   String?
  facebookUrl   String?
  
  // Champs existants
  status        String        @default("pending")
  wallet        Float         @default(0.0)
  availableQuestions Int @default(0)  // Nombre de questions disponibles
  totalQuestionsPurchased Int @default(0)  // Total historique des questions achetées
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User?         @relation(fields: [userId], references: [id])
  userId        String?       @unique
  questions     Question[]
  transactions  Transaction[]
  withdrawals   Withdrawal[]
  stripeAccount StripeAccount?
}

model Question {
  id             String        @id @default(uuid())
  title          String
  description    String
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
  deadline       DateTime
  source         String
  status         String        @default("active")
  tags           QuestionTag[] // Ajout des tags
  bets           Bet[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  resolvedAt     DateTime? // Date de résolution
  transactions   Transaction[]
}

model Bet {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  amount     Float
  prediction String
  createdAt  DateTime @default(now())
}

model Transaction {
  id         String   @id @default(cuid())
  amount     Float
  type       String
  metadata   Json?    // Ajouter ce champ pour les métadonnées
  createdAt  DateTime @default(now())
  orgId      String? 
  userId     String? 
  questionId String? 

  organization Organization? @relation(fields: [orgId], references: [id])
  user         User?         @relation(fields: [userId], references: [id])
  question     Question?     @relation(fields: [questionId], references: [id])
}
model StripeAccount {
  id           String       @id @default(cuid())
  accountId    String       @unique // Stripe account ID
  organization Organization @relation(fields: [orgId], references: [id])
  orgId        String       @unique
  status       String       @default("pending") // pending, verified, rejected
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Withdrawal {
  id              String       @id @default(cuid())
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
  amount          Float
  status          String       @default("pending") // pending, completed, failed
  stripeAccountId String?
  processedAt     DateTime?
  error           String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}
